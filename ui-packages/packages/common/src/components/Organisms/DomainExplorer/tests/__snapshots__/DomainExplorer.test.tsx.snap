// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Domain Explorer component Check error response for getQueryFields query 1`] = `
<DomainExplorer
  defaultChip={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  defaultFilter={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "finalFilters": Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        },
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
            "serviceUrl",
          ],
        },
      ],
    }
  }
  rememberedChips={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  rememberedFilters={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <withRouter(ServerErrors)
    error={Object {}}
    variant="large"
  >
    <ServerErrors
      error={Object {}}
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      match={
        Object {
          "isExact": true,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
      variant="large"
    >
      <PageSection
        variant="light"
      >
        <section
          className="pf-c-page__main-section pf-m-light"
        >
          <Bullseye>
            <div
              className="pf-l-bullseye"
            >
              <EmptyState
                variant="full"
              >
                <div
                  className="pf-c-empty-state"
                >
                  <EmptyStateIcon
                    color="var(--pf-global--danger-color--100)"
                    icon={[Function]}
                    size="md"
                  >
                    <ExclamationCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="md"
                      title={null}
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon"
                        fill="var(--pf-global--danger-color--100)"
                        height="1.5em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.1875em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1.5em"
                      >
                        <path
                          d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                          transform=""
                        />
                      </svg>
                    </ExclamationCircleIcon>
                  </EmptyStateIcon>
                  <Title
                    headingLevel="h1"
                    size="4xl"
                  >
                    <h1
                      className="pf-c-title pf-m-4xl"
                    >
                      Error fetching data
                    </h1>
                  </Title>
                  <EmptyStateBody>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      An error occurred while accessing data.
                       
                      <Component
                        id="display-error"
                        isInline={true}
                        onClick={[Function]}
                        variant="link"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "See more details",
                              "id": "display-error",
                              "isInline": true,
                              "onClick": [Function],
                              "variant": "link",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            id="display-error"
                            isInline={true}
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link pf-m-inline"
                              disabled={false}
                              id="display-error"
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <span
                                className="pf-c-button__text"
                              >
                                See more details
                              </span>
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyStateBody>
                  <Component
                    id="goback-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "children": "Go back",
                          "id": "goback-button",
                          "onClick": [Function],
                          "variant": "primary",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        id="goback-button"
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="primary"
                      >
                        <button
                          aria-disabled={null}
                          aria-label={null}
                          className="pf-c-button pf-m-primary"
                          disabled={false}
                          id="goback-button"
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          Go back
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
              </EmptyState>
            </div>
          </Bullseye>
        </section>
      </PageSection>
    </ServerErrors>
  </withRouter(ServerErrors)>
</DomainExplorer>
`;

exports[`Domain Explorer component Mock query testing 1`] = `
<DomainExplorer
  defaultChip={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  defaultFilter={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "finalFilters": Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        },
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
            "serviceUrl",
          ],
        },
      ],
    }
  }
  rememberedChips={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  rememberedFilters={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <DataToolbar
    className="pf-m-toggle-group-container"
    clearAllFilters={[Function]}
    clearFiltersButtonText="Reset to default"
    collapseListedFiltersBreakpoint="md"
    id="data-toolbar-with-chip-groups"
  >
    <div
      className="pf-c-data-toolbar pf-m-toggle-group-container"
      id="data-toolbar-with-chip-groups"
    >
      <DataToolbarContent
        breakpointMods={Array []}
        clearAllFilters={[Function]}
        clearFiltersButtonText="Reset to default"
        isExpanded={false}
        key=".0"
        showClearFiltersButton={true}
        toolbarId="data-toolbar-with-chip-groups"
      >
        <div
          className="pf-c-data-toolbar__content"
        >
          <div
            className="pf-c-data-toolbar__content-section"
          >
            <DataToolbarToggleGroup
              breakpoint="xl"
              breakpointMods={Array []}
              toggleIcon={
                <FilterIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                  title={null}
                />
              }
            >
              <div
                className="pf-c-data-toolbar__group pf-m-toggle-group pf-m-show-on-xl"
              >
                <div
                  className="pf-c-data-toolbar__toggle"
                >
                  <Component
                    aria-controls="data-toolbar-with-chip-groups-expandable-content-20"
                    aria-haspopup={false}
                    aria-label="Show Filters"
                    onClick={[Function]}
                    variant="plain"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "aria-controls": "data-toolbar-with-chip-groups-expandable-content-20",
                          "aria-haspopup": false,
                          "aria-label": "Show Filters",
                          "children": <FilterIcon
                            color="currentColor"
                            noVerticalAlign={false}
                            size="sm"
                            title={null}
                          />,
                          "onClick": [Function],
                          "variant": "plain",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        aria-controls="data-toolbar-with-chip-groups-expandable-content-20"
                        aria-haspopup={false}
                        aria-label="Show Filters"
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="plain"
                      >
                        <button
                          aria-controls="data-toolbar-with-chip-groups-expandable-content-20"
                          aria-disabled={null}
                          aria-haspopup={false}
                          aria-label="Show Filters"
                          className="pf-c-button pf-m-plain"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          <FilterIcon
                            color="currentColor"
                            noVerticalAlign={false}
                            size="sm"
                            title={null}
                          >
                            <svg
                              aria-hidden={true}
                              aria-labelledby={null}
                              fill="currentColor"
                              height="1em"
                              role="img"
                              style={
                                Object {
                                  "verticalAlign": "-0.125em",
                                }
                              }
                              viewBox="0 0 512 512"
                              width="1em"
                            >
                              <path
                                d="M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z"
                                transform=""
                              />
                            </svg>
                          </FilterIcon>
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
                <DataToolbarFilter
                  categoryName="Filters"
                  chips={
                    Array [
                      "metadata / processInstances / state: ACTIVE",
                    ]
                  }
                  deleteChip={[Function]}
                  showToolbarItem={true}
                >
                  <DataToolbarItem>
                    <div
                      className="pf-c-data-toolbar__item"
                    >
                      <DataToolbarItem>
                        <div
                          className="pf-c-data-toolbar__item"
                        >
                          <Memo(DomainExplorerFilterOptions)
                            filterChips={
                              Array [
                                "metadata / processInstances / state: ACTIVE",
                              ]
                            }
                            finalFilters={
                              Object {
                                "metadata": Object {
                                  "processInstances": Object {
                                    "state": Object {
                                      "equal": "ACTIVE",
                                    },
                                  },
                                },
                              }
                            }
                            generateFilterQuery={[Function]}
                            getQueryTypes={
                              Object {
                                "data": Object {
                                  "__schema": Object {
                                    "queryType": Array [
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "test",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                        ],
                                        "name": "TestArgument",
                                      },
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "city",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                          Object {
                                            "name": "country",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                          Object {
                                            "name": "street",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "TestArgument",
                                            },
                                          },
                                          Object {
                                            "name": "zipCode",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                        ],
                                        "kind": "INPUT_OBJECT",
                                        "name": "AddressArgument",
                                      },
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "id",
                                            "type": Object {
                                              "kind": "LIST",
                                              "name": null,
                                            },
                                          },
                                          Object {
                                            "name": "equal",
                                            "type": Object {
                                              "kind": "SCALAR",
                                              "name": "String",
                                            },
                                          },
                                          Object {
                                            "name": "isNull",
                                            "type": Object {
                                              "kind": "SCALAR",
                                              "name": "Boolean",
                                            },
                                          },
                                        ],
                                        "kind": "INPUT_OBJECT",
                                        "name": "IdArgument",
                                      },
                                    ],
                                  },
                                },
                                "loading": false,
                              }
                            }
                            getSchema={
                              Object {
                                "data": Object {},
                                "loading": false,
                              }
                            }
                            reset={false}
                            runQuery={false}
                            setFilterChips={[Function]}
                            setFinalFilters={[Function]}
                            setOffset={[Function]}
                            setReset={[Function]}
                            setRunQuery={[Function]}
                          >
                            <Component
                              ariaLabelledBy="Select a field"
                              id="select-field"
                              isExpanded={false}
                              isGrouped={true}
                              maxHeight="60vh"
                              onSelect={[Function]}
                              onToggle={[Function]}
                              placeholderText="Select a field"
                              selections="id"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "ariaLabelledBy": "Select a field",
                                    "children": undefined,
                                    "id": "select-field",
                                    "isExpanded": false,
                                    "isGrouped": true,
                                    "maxHeight": "60vh",
                                    "onSelect": [Function],
                                    "onToggle": [Function],
                                    "placeholderText": "Select a field",
                                    "selections": "id",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Select
                                  aria-label=""
                                  ariaLabelClear="Clear all"
                                  ariaLabelRemove="Remove"
                                  ariaLabelToggle="Options menu"
                                  ariaLabelTypeAhead=""
                                  ariaLabelledBy="Select a field"
                                  className=""
                                  createText="Create"
                                  customContent={null}
                                  direction="down"
                                  hasInlineFilter={false}
                                  id="select-field"
                                  isCreatable={false}
                                  isDisabled={false}
                                  isExpanded={false}
                                  isGrouped={true}
                                  isPlain={false}
                                  maxHeight="60vh"
                                  noResultsFoundText="No results found"
                                  onClear={[Function]}
                                  onCreateOption={[Function]}
                                  onFilter={null}
                                  onSelect={[Function]}
                                  onToggle={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  placeholderText="Select a field"
                                  selections="id"
                                  toggleIcon={null}
                                  toggleId={null}
                                  variant="single"
                                  width=""
                                >
                                  <div
                                    className="pf-c-select"
                                    style={
                                      Object {
                                        "width": "",
                                      }
                                    }
                                  >
                                    <SelectToggle
                                      ariaLabelToggle="Options menu"
                                      ariaLabelledBy="Select a field pf-toggle-id-44"
                                      className=""
                                      handleTypeaheadKeys={[Function]}
                                      hasClearButton={false}
                                      id="pf-toggle-id-44"
                                      isActive={false}
                                      isDisabled={false}
                                      isExpanded={false}
                                      isFocused={false}
                                      isHovered={false}
                                      isPlain={false}
                                      onClose={[Function]}
                                      onEnter={[Function]}
                                      onToggle={[Function]}
                                      parentRef={
                                        Object {
                                          "current": <div
                                            class="pf-c-select"
                                          >
                                            <button
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              aria-labelledby="Select a field pf-toggle-id-44"
                                              class="pf-c-select__toggle"
                                              id="pf-toggle-id-44"
                                              type="button"
                                            >
                                              <div
                                                class="pf-c-select__toggle-wrapper"
                                              >
                                                <span
                                                  class="pf-c-select__toggle-text"
                                                >
                                                  id
                                                </span>
                                              </div>
                                              <svg
                                                aria-hidden="true"
                                                class="pf-c-select__toggle-arrow"
                                                fill="currentColor"
                                                height="1em"
                                                role="img"
                                                style="vertical-align: -0.125em;"
                                                viewBox="0 0 320 512"
                                                width="1em"
                                              >
                                                <path
                                                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                                  transform=""
                                                />
                                              </svg>
                                            </button>
                                          </div>,
                                        }
                                      }
                                      type="button"
                                      variant="single"
                                    >
                                      <button
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-labelledby="Select a field pf-toggle-id-44"
                                        className="pf-c-select__toggle"
                                        disabled={false}
                                        id="pf-toggle-id-44"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        type="button"
                                      >
                                        <div
                                          className="pf-c-select__toggle-wrapper"
                                        >
                                          <span
                                            className="pf-c-select__toggle-text"
                                          >
                                            id
                                          </span>
                                        </div>
                                        <CaretDownIcon
                                          className="pf-c-select__toggle-arrow"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            className="pf-c-select__toggle-arrow"
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 320 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                              transform=""
                                            />
                                          </svg>
                                        </CaretDownIcon>
                                      </button>
                                    </SelectToggle>
                                  </div>
                                </Select>
                              </ComponentWithOuia>
                            </Component>
                            <Component
                              aria-label="Location"
                              id="select-operator"
                              isExpanded={false}
                              onSelect={[Function]}
                              onToggle={[Function]}
                              placeholderText="operator"
                              selections="equal"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "aria-label": "Location",
                                    "children": undefined,
                                    "id": "select-operator",
                                    "isExpanded": false,
                                    "onSelect": [Function],
                                    "onToggle": [Function],
                                    "placeholderText": "operator",
                                    "selections": "equal",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Select
                                  aria-label="Location"
                                  ariaLabelClear="Clear all"
                                  ariaLabelRemove="Remove"
                                  ariaLabelToggle="Options menu"
                                  ariaLabelTypeAhead=""
                                  ariaLabelledBy=""
                                  className=""
                                  createText="Create"
                                  customContent={null}
                                  direction="down"
                                  hasInlineFilter={false}
                                  id="select-operator"
                                  isCreatable={false}
                                  isDisabled={false}
                                  isExpanded={false}
                                  isGrouped={false}
                                  isPlain={false}
                                  noResultsFoundText="No results found"
                                  onClear={[Function]}
                                  onCreateOption={[Function]}
                                  onFilter={null}
                                  onSelect={[Function]}
                                  onToggle={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  placeholderText="operator"
                                  selections="equal"
                                  toggleIcon={null}
                                  toggleId={null}
                                  variant="single"
                                  width=""
                                >
                                  <div
                                    className="pf-c-select"
                                    style={
                                      Object {
                                        "width": "",
                                      }
                                    }
                                  >
                                    <SelectToggle
                                      ariaLabelToggle="Options menu"
                                      ariaLabelledBy=" pf-toggle-id-45"
                                      className=""
                                      handleTypeaheadKeys={[Function]}
                                      hasClearButton={false}
                                      id="pf-toggle-id-45"
                                      isActive={false}
                                      isDisabled={false}
                                      isExpanded={false}
                                      isFocused={false}
                                      isHovered={false}
                                      isPlain={false}
                                      onClose={[Function]}
                                      onEnter={[Function]}
                                      onToggle={[Function]}
                                      parentRef={
                                        Object {
                                          "current": <div
                                            class="pf-c-select"
                                          >
                                            <button
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              aria-labelledby=" pf-toggle-id-45"
                                              class="pf-c-select__toggle"
                                              id="pf-toggle-id-45"
                                              type="button"
                                            >
                                              <div
                                                class="pf-c-select__toggle-wrapper"
                                              >
                                                <span
                                                  class="pf-c-select__toggle-text"
                                                >
                                                  equal
                                                </span>
                                              </div>
                                              <svg
                                                aria-hidden="true"
                                                class="pf-c-select__toggle-arrow"
                                                fill="currentColor"
                                                height="1em"
                                                role="img"
                                                style="vertical-align: -0.125em;"
                                                viewBox="0 0 320 512"
                                                width="1em"
                                              >
                                                <path
                                                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                                  transform=""
                                                />
                                              </svg>
                                            </button>
                                          </div>,
                                        }
                                      }
                                      type="button"
                                      variant="single"
                                    >
                                      <button
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-labelledby=" pf-toggle-id-45"
                                        className="pf-c-select__toggle"
                                        disabled={false}
                                        id="pf-toggle-id-45"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        type="button"
                                      >
                                        <div
                                          className="pf-c-select__toggle-wrapper"
                                        >
                                          <span
                                            className="pf-c-select__toggle-text"
                                          >
                                            equal
                                          </span>
                                        </div>
                                        <CaretDownIcon
                                          className="pf-c-select__toggle-arrow"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            className="pf-c-select__toggle-arrow"
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 320 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                              transform=""
                                            />
                                          </svg>
                                        </CaretDownIcon>
                                      </button>
                                    </SelectToggle>
                                  </div>
                                </Select>
                              </ComponentWithOuia>
                            </Component>
                            <ForwardRef
                              aria-label="filter text for id"
                              className="kogito-common--filter-options__inputs"
                              id="textBox-input"
                              name="filterText"
                              onChange={[Function]}
                              placeholder="value"
                              type="search"
                              value=""
                            >
                              <TextInputBase
                                aria-label="filter text for id"
                                className="kogito-common--filter-options__inputs"
                                id="textBox-input"
                                innerRef={null}
                                isDisabled={false}
                                isReadOnly={false}
                                isRequired={false}
                                isValid={true}
                                name="filterText"
                                onChange={[Function]}
                                placeholder="value"
                                type="search"
                                validated="default"
                                value=""
                              >
                                <input
                                  aria-invalid={false}
                                  aria-label="filter text for id"
                                  className="pf-c-form-control kogito-common--filter-options__inputs"
                                  disabled={false}
                                  id="textBox-input"
                                  name="filterText"
                                  onChange={[Function]}
                                  placeholder="value"
                                  readOnly={false}
                                  required={false}
                                  type="search"
                                  value=""
                                />
                              </TextInputBase>
                            </ForwardRef>
                            <Component
                              id="button-with-string"
                              isDisabled={true}
                              onClick={[Function]}
                              variant="primary"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "children": "Apply Filter",
                                    "id": "button-with-string",
                                    "isDisabled": true,
                                    "onClick": [Function],
                                    "variant": "primary",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Button
                                  id="button-with-string"
                                  isDisabled={true}
                                  onClick={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  variant="primary"
                                >
                                  <button
                                    aria-disabled={null}
                                    aria-label={null}
                                    className="pf-c-button pf-m-primary"
                                    disabled={true}
                                    id="button-with-string"
                                    onClick={[Function]}
                                    tabIndex={null}
                                    type="button"
                                  >
                                    Apply Filter
                                  </button>
                                </Button>
                              </ComponentWithOuia>
                            </Component>
                          </Memo(DomainExplorerFilterOptions)>
                        </div>
                      </DataToolbarItem>
                    </div>
                  </DataToolbarItem>
                  <Portal
                    containerInfo={
                      <div
                        class="pf-c-data-toolbar__group"
                      >
                        <div
                          class="pf-c-data-toolbar__item pf-m-chip-group"
                        >
                          <ul
                            class="pf-c-chip-group pf-m-toolbar"
                          >
                            <li>
                              <h4
                                class="pf-c-chip-group__label"
                                id="pf-random-id-2"
                              >
                                Filters
                              </h4>
                              <ul
                                class="pf-c-chip-group"
                              >
                                <li
                                  class="pf-c-chip"
                                >
                                  <span
                                    class="pf-c-chip__text"
                                    id="pf-random-id-3"
                                  >
                                    metadata / processInstances / state: ACTIVE
                                  </span>
                                  <button
                                    aria-label="close"
                                    aria-labelledby="remove_pf-random-id-3 pf-random-id-3"
                                    class="pf-c-button pf-m-plain"
                                    id="remove_pf-random-id-3"
                                    type="button"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      fill="currentColor"
                                      height="1em"
                                      role="img"
                                      style="vertical-align: -0.125em;"
                                      viewBox="0 0 512 512"
                                      width="1em"
                                    >
                                      <path
                                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                        transform=""
                                      />
                                    </svg>
                                  </button>
                                </li>
                              </ul>
                            </li>
                          </ul>
                        </div>
                      </div>
                    }
                  >
                    <DataToolbarItem
                      variant="chip-group"
                    >
                      <div
                        className="pf-c-data-toolbar__item pf-m-chip-group"
                      >
                        <ChipGroup
                          className=""
                          collapsedText="\${remaining} more"
                          defaultIsOpen={false}
                          expandedText="Show Less"
                          numChips={3}
                          withToolbar={true}
                        >
                          <InnerChipGroup
                            className=""
                            collapsedText="\${remaining} more"
                            defaultIsOpen={false}
                            expandedText="Show Less"
                            isOpen={false}
                            numChips={3}
                            onToggleCollapse={[Function]}
                            withToolbar={true}
                          >
                            <ChipGroupToolbarItem
                              categoryName="Filters"
                              className=""
                              closeBtnAriaLabel="Close chip group"
                              isClosable={false}
                              key=".$Filters"
                              onClick={[Function]}
                              tooltipPosition="top"
                            >
                              <GenerateId
                                prefix="pf-random-id-"
                              >
                                <ul
                                  className="pf-c-chip-group pf-m-toolbar"
                                >
                                  <li>
                                    <h4
                                      className="pf-c-chip-group__label"
                                      id="pf-random-id-2"
                                    >
                                      Filters
                                    </h4>
                                    <ul
                                      className="pf-c-chip-group"
                                    >
                                      <Component
                                        component="li"
                                        key=".$metadata / processInstances / state=2 ACTIVE"
                                        onClick={[Function]}
                                      >
                                        <ComponentWithOuia
                                          component={[Function]}
                                          componentProps={
                                            Object {
                                              "children": "metadata / processInstances / state: ACTIVE",
                                              "component": "li",
                                              "onClick": [Function],
                                            }
                                          }
                                          consumerContext={null}
                                        >
                                          <Chip
                                            className=""
                                            closeBtnAriaLabel="close"
                                            component="li"
                                            isOverflowChip={false}
                                            isReadOnly={false}
                                            onClick={[Function]}
                                            ouiaContext={
                                              Object {
                                                "isOuia": false,
                                                "ouiaId": null,
                                              }
                                            }
                                            tooltipPosition="top"
                                          >
                                            <GenerateId
                                              prefix="pf-random-id-"
                                            >
                                              <li
                                                className="pf-c-chip"
                                              >
                                                <span
                                                  className="pf-c-chip__text"
                                                  id="pf-random-id-3"
                                                >
                                                  metadata / processInstances / state: ACTIVE
                                                </span>
                                                <ChipButton
                                                  aria-labelledby="remove_pf-random-id-3 pf-random-id-3"
                                                  ariaLabel="close"
                                                  id="remove_pf-random-id-3"
                                                  onClick={[Function]}
                                                >
                                                  <Component
                                                    aria-label="close"
                                                    aria-labelledby="remove_pf-random-id-3 pf-random-id-3"
                                                    className=""
                                                    id="remove_pf-random-id-3"
                                                    onClick={[Function]}
                                                    variant="plain"
                                                  >
                                                    <ComponentWithOuia
                                                      component={[Function]}
                                                      componentProps={
                                                        Object {
                                                          "aria-label": "close",
                                                          "aria-labelledby": "remove_pf-random-id-3 pf-random-id-3",
                                                          "children": <TimesCircleIcon
                                                            aria-hidden="true"
                                                            color="currentColor"
                                                            noVerticalAlign={false}
                                                            size="sm"
                                                            title={null}
                                                          />,
                                                          "className": "",
                                                          "id": "remove_pf-random-id-3",
                                                          "onClick": [Function],
                                                          "variant": "plain",
                                                        }
                                                      }
                                                      consumerContext={
                                                        Object {
                                                          "isOuia": false,
                                                          "ouiaId": null,
                                                        }
                                                      }
                                                    >
                                                      <Button
                                                        aria-label="close"
                                                        aria-labelledby="remove_pf-random-id-3 pf-random-id-3"
                                                        className=""
                                                        id="remove_pf-random-id-3"
                                                        onClick={[Function]}
                                                        ouiaContext={
                                                          Object {
                                                            "isOuia": false,
                                                            "ouiaId": null,
                                                          }
                                                        }
                                                        variant="plain"
                                                      >
                                                        <button
                                                          aria-disabled={null}
                                                          aria-label="close"
                                                          aria-labelledby="remove_pf-random-id-3 pf-random-id-3"
                                                          className="pf-c-button pf-m-plain"
                                                          disabled={false}
                                                          id="remove_pf-random-id-3"
                                                          onClick={[Function]}
                                                          tabIndex={null}
                                                          type="button"
                                                        >
                                                          <TimesCircleIcon
                                                            aria-hidden="true"
                                                            color="currentColor"
                                                            noVerticalAlign={false}
                                                            size="sm"
                                                            title={null}
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              aria-labelledby={null}
                                                              fill="currentColor"
                                                              height="1em"
                                                              role="img"
                                                              style={
                                                                Object {
                                                                  "verticalAlign": "-0.125em",
                                                                }
                                                              }
                                                              viewBox="0 0 512 512"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                                                transform=""
                                                              />
                                                            </svg>
                                                          </TimesCircleIcon>
                                                        </button>
                                                      </Button>
                                                    </ComponentWithOuia>
                                                  </Component>
                                                </ChipButton>
                                              </li>
                                            </GenerateId>
                                          </Chip>
                                        </ComponentWithOuia>
                                      </Component>
                                    </ul>
                                  </li>
                                </ul>
                              </GenerateId>
                            </ChipGroupToolbarItem>
                          </InnerChipGroup>
                        </ChipGroup>
                      </div>
                    </DataToolbarItem>
                  </Portal>
                </DataToolbarFilter>
              </div>
            </DataToolbarToggleGroup>
            <ForwardRef>
              <DataToolbarGroupWithRef
                breakpointMods={Array []}
                innerRef={null}
              >
                <div
                  className="pf-c-data-toolbar__group"
                >
                  <DataToolbarItem>
                    <div
                      className="pf-c-data-toolbar__item"
                    >
                      <MockedDomainExplorerManageColumns
                        columnPickerType="Travels"
                        data={
                          Array [
                            Object {
                              "name": "id",
                              "type": Object {
                                "fields": null,
                                "kind": "SCALAR",
                                "name": "String",
                              },
                            },
                            Object {
                              "name": "flight",
                              "type": Object {
                                "fields": Array [
                                  Object {
                                    "name": "arrival",
                                    "type": Object {
                                      "kind": "SCALAR",
                                      "name": "String",
                                    },
                                  },
                                ],
                                "kind": "OBJECT",
                                "name": "Flight",
                              },
                            },
                          ]
                        }
                        enableRefresh={true}
                        getPicker={
                          Object {
                            "data": Object {
                              "__type": Object {
                                "fields": Array [
                                  Object {
                                    "name": "flight",
                                    "type": Object {
                                      "fields": Array [
                                        Object {
                                          "name": "arrival",
                                          "type": Object {
                                            "kind": "SCALAR",
                                            "name": "String",
                                          },
                                        },
                                      ],
                                      "kind": "OBJECT",
                                      "name": "Flight",
                                    },
                                  },
                                  Object {
                                    "name": "id",
                                    "type": Object {
                                      "fields": null,
                                      "kind": "SCALAR",
                                      "name": "String",
                                    },
                                  },
                                ],
                              },
                            },
                            "loading": false,
                          }
                        }
                        getQueryTypes={
                          Object {
                            "data": Object {
                              "__schema": Object {
                                "queryType": Array [
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "test",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                    ],
                                    "name": "TestArgument",
                                  },
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "city",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                      Object {
                                        "name": "country",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                      Object {
                                        "name": "street",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "TestArgument",
                                        },
                                      },
                                      Object {
                                        "name": "zipCode",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                    ],
                                    "kind": "INPUT_OBJECT",
                                    "name": "AddressArgument",
                                  },
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "id",
                                        "type": Object {
                                          "kind": "LIST",
                                          "name": null,
                                        },
                                      },
                                      Object {
                                        "name": "equal",
                                        "type": Object {
                                          "kind": "SCALAR",
                                          "name": "String",
                                        },
                                      },
                                      Object {
                                        "name": "isNull",
                                        "type": Object {
                                          "kind": "SCALAR",
                                          "name": "Boolean",
                                        },
                                      },
                                    ],
                                    "kind": "INPUT_OBJECT",
                                    "name": "IdArgument",
                                  },
                                ],
                              },
                            },
                            "loading": false,
                          }
                        }
                        isModalOpen={false}
                        metaData={
                          Object {
                            "metadata": Array [
                              Object {
                                "processInstances": Array [
                                  "id",
                                  "processName",
                                  "state",
                                  "start",
                                  "lastUpdate",
                                  "businessKey",
                                  "serviceUrl",
                                ],
                              },
                            ],
                          }
                        }
                        selected={Array []}
                        setEnableRefresh={[Function]}
                        setIsModalOpen={[Function]}
                        setOffsetVal={[Function]}
                        setPageSize={[Function]}
                        setParameters={[Function]}
                        setRunQuery={[Function]}
                        setSelected={[Function]}
                      />
                    </div>
                  </DataToolbarItem>
                </div>
              </DataToolbarGroupWithRef>
            </ForwardRef>
          </div>
          <DataToolbarExpandableContent
            chipContainerRef={
              Object {
                "current": <div
                  class="pf-c-data-toolbar__group"
                />,
              }
            }
            clearAllFilters={[Function]}
            clearFiltersButtonText="Reset to default"
            expandableContentRef={
              Object {
                "current": <div
                  class="pf-c-data-toolbar__expandable-content"
                  id="data-toolbar-with-chip-groups-expandable-content-20"
                >
                  <div
                    class="pf-c-data-toolbar__group"
                  />
                  <div
                    class="pf-c-data-toolbar__group pf-m-chip-container"
                  >
                    <div
                      class="pf-c-data-toolbar__group"
                    />
                    <div
                      class="pf-c-data-toolbar__item"
                    >
                      <button
                        class="pf-c-button pf-m-link pf-m-inline"
                        type="button"
                      >
                        <span
                          class="pf-c-button__text"
                        >
                          Reset to default
                        </span>
                      </button>
                    </div>
                  </div>
                </div>,
              }
            }
            id="data-toolbar-with-chip-groups-expandable-content-20"
            isExpanded={false}
            showClearFiltersButton={true}
          >
            <div
              className="pf-c-data-toolbar__expandable-content"
              id="data-toolbar-with-chip-groups-expandable-content-20"
            >
              <ForwardRef>
                <DataToolbarGroupWithRef
                  breakpointMods={Array []}
                  innerRef={null}
                >
                  <div
                    className="pf-c-data-toolbar__group"
                  />
                </DataToolbarGroupWithRef>
              </ForwardRef>
              <ForwardRef
                className="pf-m-chip-container"
              >
                <DataToolbarGroupWithRef
                  breakpointMods={Array []}
                  className="pf-m-chip-container"
                  innerRef={null}
                >
                  <div
                    className="pf-c-data-toolbar__group pf-m-chip-container"
                  >
                    <ForwardRef>
                      <DataToolbarGroupWithRef
                        breakpointMods={Array []}
                        innerRef={
                          Object {
                            "current": <div
                              class="pf-c-data-toolbar__group"
                            />,
                          }
                        }
                      >
                        <div
                          className="pf-c-data-toolbar__group"
                        />
                      </DataToolbarGroupWithRef>
                    </ForwardRef>
                    <DataToolbarItem
                      className=""
                    >
                      <div
                        className="pf-c-data-toolbar__item"
                      >
                        <Component
                          isInline={true}
                          onClick={[Function]}
                          variant="link"
                        >
                          <ComponentWithOuia
                            component={[Function]}
                            componentProps={
                              Object {
                                "children": "Reset to default",
                                "isInline": true,
                                "onClick": [Function],
                                "variant": "link",
                              }
                            }
                            consumerContext={null}
                          >
                            <Button
                              isInline={true}
                              onClick={[Function]}
                              ouiaContext={
                                Object {
                                  "isOuia": false,
                                  "ouiaId": null,
                                }
                              }
                              variant="link"
                            >
                              <button
                                aria-disabled={null}
                                aria-label={null}
                                className="pf-c-button pf-m-link pf-m-inline"
                                disabled={false}
                                onClick={[Function]}
                                tabIndex={null}
                                type="button"
                              >
                                <span
                                  className="pf-c-button__text"
                                >
                                  Reset to default
                                </span>
                              </button>
                            </Button>
                          </ComponentWithOuia>
                        </Component>
                      </div>
                    </DataToolbarItem>
                  </div>
                </DataToolbarGroupWithRef>
              </ForwardRef>
            </div>
          </DataToolbarExpandableContent>
        </div>
      </DataToolbarContent>
      <DataToolbarChipGroupContent
        chipGroupContentRef={
          Object {
            "current": <div
              class="pf-c-data-toolbar__content"
            >
              <div
                class="pf-c-data-toolbar__group"
              >
                <div
                  class="pf-c-data-toolbar__item pf-m-chip-group"
                >
                  <ul
                    class="pf-c-chip-group pf-m-toolbar"
                  >
                    <li>
                      <h4
                        class="pf-c-chip-group__label"
                        id="pf-random-id-2"
                      >
                        Filters
                      </h4>
                      <ul
                        class="pf-c-chip-group"
                      >
                        <li
                          class="pf-c-chip"
                        >
                          <span
                            class="pf-c-chip__text"
                            id="pf-random-id-3"
                          >
                            metadata / processInstances / state: ACTIVE
                          </span>
                          <button
                            aria-label="close"
                            aria-labelledby="remove_pf-random-id-3 pf-random-id-3"
                            class="pf-c-button pf-m-plain"
                            id="remove_pf-random-id-3"
                            type="button"
                          >
                            <svg
                              aria-hidden="true"
                              fill="currentColor"
                              height="1em"
                              role="img"
                              style="vertical-align: -0.125em;"
                              viewBox="0 0 512 512"
                              width="1em"
                            >
                              <path
                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                transform=""
                              />
                            </svg>
                          </button>
                        </li>
                      </ul>
                    </li>
                  </ul>
                </div>
              </div>
              <div
                class="pf-c-data-toolbar__item"
              >
                <button
                  class="pf-c-button pf-m-link pf-m-inline"
                  type="button"
                >
                  <span
                    class="pf-c-button__text"
                  >
                    Reset to default
                  </span>
                </button>
              </div>
            </div>,
          }
        }
        clearAllFilters={[Function]}
        clearFiltersButtonText="Reset to default"
        collapseListedFiltersBreakpoint="md"
        isExpanded={false}
        numberOfFilters={1}
        showClearFiltersButton={true}
      >
        <div
          className="pf-c-data-toolbar__content"
        >
          <ForwardRef
            className=""
          >
            <DataToolbarGroupWithRef
              breakpointMods={Array []}
              className=""
              innerRef={null}
            >
              <div
                className="pf-c-data-toolbar__group"
              />
            </DataToolbarGroupWithRef>
          </ForwardRef>
          <DataToolbarItem
            className=""
          >
            <div
              className="pf-c-data-toolbar__item"
            >
              <Component
                isInline={true}
                onClick={[Function]}
                variant="link"
              >
                <ComponentWithOuia
                  component={[Function]}
                  componentProps={
                    Object {
                      "children": "Reset to default",
                      "isInline": true,
                      "onClick": [Function],
                      "variant": "link",
                    }
                  }
                  consumerContext={null}
                >
                  <Button
                    isInline={true}
                    onClick={[Function]}
                    ouiaContext={
                      Object {
                        "isOuia": false,
                        "ouiaId": null,
                      }
                    }
                    variant="link"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-link pf-m-inline"
                      disabled={false}
                      onClick={[Function]}
                      tabIndex={null}
                      type="button"
                    >
                      <span
                        className="pf-c-button__text"
                      >
                        Reset to default
                      </span>
                    </button>
                  </Button>
                </ComponentWithOuia>
              </Component>
            </div>
          </DataToolbarItem>
        </div>
      </DataToolbarChipGroupContent>
    </div>
  </DataToolbar>
  <div
    className="kogito-common--domain-explorer__table-OverFlow"
  >
    <MockedDomainExplorerTable
      columnFilters={
        Array [
          undefined,
          undefined,
        ]
      }
      displayEmptyState={false}
      displayTable={true}
      filterChips={
        Array [
          "metadata / processInstances / state: ACTIVE",
        ]
      }
      filterError=""
      finalFilters={
        Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        }
      }
      handleRetry={[Function]}
      isLoadingMore={false}
      offset={0}
      onDeleteChip={[Function]}
      parameters={
        Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ]
      }
      rows={Array []}
      selected={Array []}
      setRows={[Function]}
      tableLoading={false}
    />
  </div>
</DomainExplorer>
`;

exports[`Domain Explorer component Snapshot test with default prop 1`] = `
<DomainExplorer
  defaultChip={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  defaultFilter={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "finalFilters": Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        },
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
            "serviceUrl",
          ],
        },
      ],
    }
  }
  rememberedChips={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  rememberedFilters={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <DataToolbar
    className="pf-m-toggle-group-container"
    clearAllFilters={[Function]}
    clearFiltersButtonText="Reset to default"
    collapseListedFiltersBreakpoint="md"
    id="data-toolbar-with-chip-groups"
  >
    <div
      className="pf-c-data-toolbar pf-m-toggle-group-container"
      id="data-toolbar-with-chip-groups"
    >
      <DataToolbarContent
        breakpointMods={Array []}
        clearAllFilters={[Function]}
        clearFiltersButtonText="Reset to default"
        isExpanded={false}
        key=".0"
        showClearFiltersButton={true}
        toolbarId="data-toolbar-with-chip-groups"
      >
        <div
          className="pf-c-data-toolbar__content"
        >
          <div
            className="pf-c-data-toolbar__content-section"
          >
            <DataToolbarToggleGroup
              breakpoint="xl"
              breakpointMods={Array []}
              toggleIcon={
                <FilterIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                  title={null}
                />
              }
            >
              <div
                className="pf-c-data-toolbar__group pf-m-toggle-group pf-m-show-on-xl"
              >
                <div
                  className="pf-c-data-toolbar__toggle"
                >
                  <Component
                    aria-controls="data-toolbar-with-chip-groups-expandable-content-5"
                    aria-haspopup={false}
                    aria-label="Show Filters"
                    onClick={[Function]}
                    variant="plain"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "aria-controls": "data-toolbar-with-chip-groups-expandable-content-5",
                          "aria-haspopup": false,
                          "aria-label": "Show Filters",
                          "children": <FilterIcon
                            color="currentColor"
                            noVerticalAlign={false}
                            size="sm"
                            title={null}
                          />,
                          "onClick": [Function],
                          "variant": "plain",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        aria-controls="data-toolbar-with-chip-groups-expandable-content-5"
                        aria-haspopup={false}
                        aria-label="Show Filters"
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="plain"
                      >
                        <button
                          aria-controls="data-toolbar-with-chip-groups-expandable-content-5"
                          aria-disabled={null}
                          aria-haspopup={false}
                          aria-label="Show Filters"
                          className="pf-c-button pf-m-plain"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          <FilterIcon
                            color="currentColor"
                            noVerticalAlign={false}
                            size="sm"
                            title={null}
                          >
                            <svg
                              aria-hidden={true}
                              aria-labelledby={null}
                              fill="currentColor"
                              height="1em"
                              role="img"
                              style={
                                Object {
                                  "verticalAlign": "-0.125em",
                                }
                              }
                              viewBox="0 0 512 512"
                              width="1em"
                            >
                              <path
                                d="M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z"
                                transform=""
                              />
                            </svg>
                          </FilterIcon>
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
                <DataToolbarFilter
                  categoryName="Filters"
                  chips={
                    Array [
                      "metadata / processInstances / state: ACTIVE",
                    ]
                  }
                  deleteChip={[Function]}
                  showToolbarItem={true}
                >
                  <DataToolbarItem>
                    <div
                      className="pf-c-data-toolbar__item"
                    >
                      <DataToolbarItem>
                        <div
                          className="pf-c-data-toolbar__item"
                        >
                          <Memo(DomainExplorerFilterOptions)
                            filterChips={
                              Array [
                                "metadata / processInstances / state: ACTIVE",
                              ]
                            }
                            finalFilters={
                              Object {
                                "metadata": Object {
                                  "processInstances": Object {
                                    "state": Object {
                                      "equal": "ACTIVE",
                                    },
                                  },
                                },
                              }
                            }
                            generateFilterQuery={[Function]}
                            getQueryTypes={
                              Object {
                                "data": Object {
                                  "__schema": Object {
                                    "queryType": Array [
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "test",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                        ],
                                        "name": "TestArgument",
                                      },
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "city",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                          Object {
                                            "name": "country",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                          Object {
                                            "name": "street",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "TestArgument",
                                            },
                                          },
                                          Object {
                                            "name": "zipCode",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                        ],
                                        "kind": "INPUT_OBJECT",
                                        "name": "AddressArgument",
                                      },
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "id",
                                            "type": Object {
                                              "kind": "LIST",
                                              "name": null,
                                            },
                                          },
                                          Object {
                                            "name": "equal",
                                            "type": Object {
                                              "kind": "SCALAR",
                                              "name": "String",
                                            },
                                          },
                                          Object {
                                            "name": "isNull",
                                            "type": Object {
                                              "kind": "SCALAR",
                                              "name": "Boolean",
                                            },
                                          },
                                        ],
                                        "kind": "INPUT_OBJECT",
                                        "name": "IdArgument",
                                      },
                                    ],
                                  },
                                },
                                "loading": false,
                              }
                            }
                            getSchema={
                              Object {
                                "data": Object {},
                                "loading": false,
                              }
                            }
                            reset={false}
                            runQuery={false}
                            setFilterChips={[Function]}
                            setFinalFilters={[Function]}
                            setOffset={[Function]}
                            setReset={[Function]}
                            setRunQuery={[Function]}
                          >
                            <Component
                              ariaLabelledBy="Select a field"
                              id="select-field"
                              isExpanded={false}
                              isGrouped={true}
                              maxHeight="60vh"
                              onSelect={[Function]}
                              onToggle={[Function]}
                              placeholderText="Select a field"
                              selections="id"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "ariaLabelledBy": "Select a field",
                                    "children": undefined,
                                    "id": "select-field",
                                    "isExpanded": false,
                                    "isGrouped": true,
                                    "maxHeight": "60vh",
                                    "onSelect": [Function],
                                    "onToggle": [Function],
                                    "placeholderText": "Select a field",
                                    "selections": "id",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Select
                                  aria-label=""
                                  ariaLabelClear="Clear all"
                                  ariaLabelRemove="Remove"
                                  ariaLabelToggle="Options menu"
                                  ariaLabelTypeAhead=""
                                  ariaLabelledBy="Select a field"
                                  className=""
                                  createText="Create"
                                  customContent={null}
                                  direction="down"
                                  hasInlineFilter={false}
                                  id="select-field"
                                  isCreatable={false}
                                  isDisabled={false}
                                  isExpanded={false}
                                  isGrouped={true}
                                  isPlain={false}
                                  maxHeight="60vh"
                                  noResultsFoundText="No results found"
                                  onClear={[Function]}
                                  onCreateOption={[Function]}
                                  onFilter={null}
                                  onSelect={[Function]}
                                  onToggle={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  placeholderText="Select a field"
                                  selections="id"
                                  toggleIcon={null}
                                  toggleId={null}
                                  variant="single"
                                  width=""
                                >
                                  <div
                                    className="pf-c-select"
                                    style={
                                      Object {
                                        "width": "",
                                      }
                                    }
                                  >
                                    <SelectToggle
                                      ariaLabelToggle="Options menu"
                                      ariaLabelledBy="Select a field pf-toggle-id-12"
                                      className=""
                                      handleTypeaheadKeys={[Function]}
                                      hasClearButton={false}
                                      id="pf-toggle-id-12"
                                      isActive={false}
                                      isDisabled={false}
                                      isExpanded={false}
                                      isFocused={false}
                                      isHovered={false}
                                      isPlain={false}
                                      onClose={[Function]}
                                      onEnter={[Function]}
                                      onToggle={[Function]}
                                      parentRef={
                                        Object {
                                          "current": <div
                                            class="pf-c-select"
                                          >
                                            <button
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              aria-labelledby="Select a field pf-toggle-id-18"
                                              class="pf-c-select__toggle"
                                              id="pf-toggle-id-18"
                                              type="button"
                                            >
                                              <div
                                                class="pf-c-select__toggle-wrapper"
                                              >
                                                <span
                                                  class="pf-c-select__toggle-text"
                                                >
                                                  id
                                                </span>
                                              </div>
                                              <svg
                                                aria-hidden="true"
                                                class="pf-c-select__toggle-arrow"
                                                fill="currentColor"
                                                height="1em"
                                                role="img"
                                                style="vertical-align: -0.125em;"
                                                viewBox="0 0 320 512"
                                                width="1em"
                                              >
                                                <path
                                                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                                  transform=""
                                                />
                                              </svg>
                                            </button>
                                          </div>,
                                        }
                                      }
                                      type="button"
                                      variant="single"
                                    >
                                      <button
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-labelledby="Select a field pf-toggle-id-12"
                                        className="pf-c-select__toggle"
                                        disabled={false}
                                        id="pf-toggle-id-12"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        type="button"
                                      >
                                        <div
                                          className="pf-c-select__toggle-wrapper"
                                        >
                                          <span
                                            className="pf-c-select__toggle-text"
                                          >
                                            id
                                          </span>
                                        </div>
                                        <CaretDownIcon
                                          className="pf-c-select__toggle-arrow"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            className="pf-c-select__toggle-arrow"
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 320 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                              transform=""
                                            />
                                          </svg>
                                        </CaretDownIcon>
                                      </button>
                                    </SelectToggle>
                                  </div>
                                </Select>
                              </ComponentWithOuia>
                            </Component>
                            <Component
                              aria-label="Location"
                              id="select-operator"
                              isExpanded={false}
                              onSelect={[Function]}
                              onToggle={[Function]}
                              placeholderText="operator"
                              selections="equal"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "aria-label": "Location",
                                    "children": undefined,
                                    "id": "select-operator",
                                    "isExpanded": false,
                                    "onSelect": [Function],
                                    "onToggle": [Function],
                                    "placeholderText": "operator",
                                    "selections": "equal",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Select
                                  aria-label="Location"
                                  ariaLabelClear="Clear all"
                                  ariaLabelRemove="Remove"
                                  ariaLabelToggle="Options menu"
                                  ariaLabelTypeAhead=""
                                  ariaLabelledBy=""
                                  className=""
                                  createText="Create"
                                  customContent={null}
                                  direction="down"
                                  hasInlineFilter={false}
                                  id="select-operator"
                                  isCreatable={false}
                                  isDisabled={false}
                                  isExpanded={false}
                                  isGrouped={false}
                                  isPlain={false}
                                  noResultsFoundText="No results found"
                                  onClear={[Function]}
                                  onCreateOption={[Function]}
                                  onFilter={null}
                                  onSelect={[Function]}
                                  onToggle={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  placeholderText="operator"
                                  selections="equal"
                                  toggleIcon={null}
                                  toggleId={null}
                                  variant="single"
                                  width=""
                                >
                                  <div
                                    className="pf-c-select"
                                    style={
                                      Object {
                                        "width": "",
                                      }
                                    }
                                  >
                                    <SelectToggle
                                      ariaLabelToggle="Options menu"
                                      ariaLabelledBy=" pf-toggle-id-13"
                                      className=""
                                      handleTypeaheadKeys={[Function]}
                                      hasClearButton={false}
                                      id="pf-toggle-id-13"
                                      isActive={false}
                                      isDisabled={false}
                                      isExpanded={false}
                                      isFocused={false}
                                      isHovered={false}
                                      isPlain={false}
                                      onClose={[Function]}
                                      onEnter={[Function]}
                                      onToggle={[Function]}
                                      parentRef={
                                        Object {
                                          "current": <div
                                            class="pf-c-select"
                                          >
                                            <button
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              aria-labelledby=" pf-toggle-id-19"
                                              class="pf-c-select__toggle"
                                              id="pf-toggle-id-19"
                                              type="button"
                                            >
                                              <div
                                                class="pf-c-select__toggle-wrapper"
                                              >
                                                <span
                                                  class="pf-c-select__toggle-text"
                                                >
                                                  equal
                                                </span>
                                              </div>
                                              <svg
                                                aria-hidden="true"
                                                class="pf-c-select__toggle-arrow"
                                                fill="currentColor"
                                                height="1em"
                                                role="img"
                                                style="vertical-align: -0.125em;"
                                                viewBox="0 0 320 512"
                                                width="1em"
                                              >
                                                <path
                                                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                                  transform=""
                                                />
                                              </svg>
                                            </button>
                                          </div>,
                                        }
                                      }
                                      type="button"
                                      variant="single"
                                    >
                                      <button
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-labelledby=" pf-toggle-id-13"
                                        className="pf-c-select__toggle"
                                        disabled={false}
                                        id="pf-toggle-id-13"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        type="button"
                                      >
                                        <div
                                          className="pf-c-select__toggle-wrapper"
                                        >
                                          <span
                                            className="pf-c-select__toggle-text"
                                          >
                                            equal
                                          </span>
                                        </div>
                                        <CaretDownIcon
                                          className="pf-c-select__toggle-arrow"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            className="pf-c-select__toggle-arrow"
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 320 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                              transform=""
                                            />
                                          </svg>
                                        </CaretDownIcon>
                                      </button>
                                    </SelectToggle>
                                  </div>
                                </Select>
                              </ComponentWithOuia>
                            </Component>
                            <ForwardRef
                              aria-label="filter text for id"
                              className="kogito-common--filter-options__inputs"
                              id="textBox-input"
                              name="filterText"
                              onChange={[Function]}
                              placeholder="value"
                              type="search"
                              value=""
                            >
                              <TextInputBase
                                aria-label="filter text for id"
                                className="kogito-common--filter-options__inputs"
                                id="textBox-input"
                                innerRef={null}
                                isDisabled={false}
                                isReadOnly={false}
                                isRequired={false}
                                isValid={true}
                                name="filterText"
                                onChange={[Function]}
                                placeholder="value"
                                type="search"
                                validated="default"
                                value=""
                              >
                                <input
                                  aria-invalid={false}
                                  aria-label="filter text for id"
                                  className="pf-c-form-control kogito-common--filter-options__inputs"
                                  disabled={false}
                                  id="textBox-input"
                                  name="filterText"
                                  onChange={[Function]}
                                  placeholder="value"
                                  readOnly={false}
                                  required={false}
                                  type="search"
                                  value=""
                                />
                              </TextInputBase>
                            </ForwardRef>
                            <Component
                              id="button-with-string"
                              isDisabled={true}
                              onClick={[Function]}
                              variant="primary"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "children": "Apply Filter",
                                    "id": "button-with-string",
                                    "isDisabled": true,
                                    "onClick": [Function],
                                    "variant": "primary",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Button
                                  id="button-with-string"
                                  isDisabled={true}
                                  onClick={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  variant="primary"
                                >
                                  <button
                                    aria-disabled={null}
                                    aria-label={null}
                                    className="pf-c-button pf-m-primary"
                                    disabled={true}
                                    id="button-with-string"
                                    onClick={[Function]}
                                    tabIndex={null}
                                    type="button"
                                  >
                                    Apply Filter
                                  </button>
                                </Button>
                              </ComponentWithOuia>
                            </Component>
                          </Memo(DomainExplorerFilterOptions)>
                        </div>
                      </DataToolbarItem>
                    </div>
                  </DataToolbarItem>
                  <Portal
                    containerInfo={
                      <div
                        class="pf-c-data-toolbar__group"
                      >
                        <div
                          class="pf-c-data-toolbar__item pf-m-chip-group"
                        >
                          <ul
                            class="pf-c-chip-group pf-m-toolbar"
                          >
                            <li>
                              <h4
                                class="pf-c-chip-group__label"
                                id="pf-random-id-0"
                              >
                                Filters
                              </h4>
                              <ul
                                class="pf-c-chip-group"
                              >
                                <li
                                  class="pf-c-chip"
                                >
                                  <span
                                    class="pf-c-chip__text"
                                    id="pf-random-id-1"
                                  >
                                    metadata / processInstances / state: ACTIVE
                                  </span>
                                  <button
                                    aria-label="close"
                                    aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                    class="pf-c-button pf-m-plain"
                                    id="remove_pf-random-id-1"
                                    type="button"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      fill="currentColor"
                                      height="1em"
                                      role="img"
                                      style="vertical-align: -0.125em;"
                                      viewBox="0 0 512 512"
                                      width="1em"
                                    >
                                      <path
                                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                        transform=""
                                      />
                                    </svg>
                                  </button>
                                </li>
                              </ul>
                            </li>
                          </ul>
                        </div>
                      </div>
                    }
                  >
                    <DataToolbarItem
                      variant="chip-group"
                    >
                      <div
                        className="pf-c-data-toolbar__item pf-m-chip-group"
                      >
                        <ChipGroup
                          className=""
                          collapsedText="\${remaining} more"
                          defaultIsOpen={false}
                          expandedText="Show Less"
                          numChips={3}
                          withToolbar={true}
                        >
                          <InnerChipGroup
                            className=""
                            collapsedText="\${remaining} more"
                            defaultIsOpen={false}
                            expandedText="Show Less"
                            isOpen={false}
                            numChips={3}
                            onToggleCollapse={[Function]}
                            withToolbar={true}
                          >
                            <ChipGroupToolbarItem
                              categoryName="Filters"
                              className=""
                              closeBtnAriaLabel="Close chip group"
                              isClosable={false}
                              key=".$Filters"
                              onClick={[Function]}
                              tooltipPosition="top"
                            >
                              <GenerateId
                                prefix="pf-random-id-"
                              >
                                <ul
                                  className="pf-c-chip-group pf-m-toolbar"
                                >
                                  <li>
                                    <h4
                                      className="pf-c-chip-group__label"
                                      id="pf-random-id-0"
                                    >
                                      Filters
                                    </h4>
                                    <ul
                                      className="pf-c-chip-group"
                                    >
                                      <Component
                                        component="li"
                                        key=".$metadata / processInstances / state=2 ACTIVE"
                                        onClick={[Function]}
                                      >
                                        <ComponentWithOuia
                                          component={[Function]}
                                          componentProps={
                                            Object {
                                              "children": "metadata / processInstances / state: ACTIVE",
                                              "component": "li",
                                              "onClick": [Function],
                                            }
                                          }
                                          consumerContext={null}
                                        >
                                          <Chip
                                            className=""
                                            closeBtnAriaLabel="close"
                                            component="li"
                                            isOverflowChip={false}
                                            isReadOnly={false}
                                            onClick={[Function]}
                                            ouiaContext={
                                              Object {
                                                "isOuia": false,
                                                "ouiaId": null,
                                              }
                                            }
                                            tooltipPosition="top"
                                          >
                                            <GenerateId
                                              prefix="pf-random-id-"
                                            >
                                              <li
                                                className="pf-c-chip"
                                              >
                                                <span
                                                  className="pf-c-chip__text"
                                                  id="pf-random-id-1"
                                                >
                                                  metadata / processInstances / state: ACTIVE
                                                </span>
                                                <ChipButton
                                                  aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                                  ariaLabel="close"
                                                  id="remove_pf-random-id-1"
                                                  onClick={[Function]}
                                                >
                                                  <Component
                                                    aria-label="close"
                                                    aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                                    className=""
                                                    id="remove_pf-random-id-1"
                                                    onClick={[Function]}
                                                    variant="plain"
                                                  >
                                                    <ComponentWithOuia
                                                      component={[Function]}
                                                      componentProps={
                                                        Object {
                                                          "aria-label": "close",
                                                          "aria-labelledby": "remove_pf-random-id-1 pf-random-id-1",
                                                          "children": <TimesCircleIcon
                                                            aria-hidden="true"
                                                            color="currentColor"
                                                            noVerticalAlign={false}
                                                            size="sm"
                                                            title={null}
                                                          />,
                                                          "className": "",
                                                          "id": "remove_pf-random-id-1",
                                                          "onClick": [Function],
                                                          "variant": "plain",
                                                        }
                                                      }
                                                      consumerContext={
                                                        Object {
                                                          "isOuia": false,
                                                          "ouiaId": null,
                                                        }
                                                      }
                                                    >
                                                      <Button
                                                        aria-label="close"
                                                        aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                                        className=""
                                                        id="remove_pf-random-id-1"
                                                        onClick={[Function]}
                                                        ouiaContext={
                                                          Object {
                                                            "isOuia": false,
                                                            "ouiaId": null,
                                                          }
                                                        }
                                                        variant="plain"
                                                      >
                                                        <button
                                                          aria-disabled={null}
                                                          aria-label="close"
                                                          aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                                          className="pf-c-button pf-m-plain"
                                                          disabled={false}
                                                          id="remove_pf-random-id-1"
                                                          onClick={[Function]}
                                                          tabIndex={null}
                                                          type="button"
                                                        >
                                                          <TimesCircleIcon
                                                            aria-hidden="true"
                                                            color="currentColor"
                                                            noVerticalAlign={false}
                                                            size="sm"
                                                            title={null}
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              aria-labelledby={null}
                                                              fill="currentColor"
                                                              height="1em"
                                                              role="img"
                                                              style={
                                                                Object {
                                                                  "verticalAlign": "-0.125em",
                                                                }
                                                              }
                                                              viewBox="0 0 512 512"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                                                transform=""
                                                              />
                                                            </svg>
                                                          </TimesCircleIcon>
                                                        </button>
                                                      </Button>
                                                    </ComponentWithOuia>
                                                  </Component>
                                                </ChipButton>
                                              </li>
                                            </GenerateId>
                                          </Chip>
                                        </ComponentWithOuia>
                                      </Component>
                                    </ul>
                                  </li>
                                </ul>
                              </GenerateId>
                            </ChipGroupToolbarItem>
                          </InnerChipGroup>
                        </ChipGroup>
                      </div>
                    </DataToolbarItem>
                  </Portal>
                </DataToolbarFilter>
              </div>
            </DataToolbarToggleGroup>
            <ForwardRef>
              <DataToolbarGroupWithRef
                breakpointMods={Array []}
                innerRef={null}
              >
                <div
                  className="pf-c-data-toolbar__group"
                >
                  <DataToolbarItem>
                    <div
                      className="pf-c-data-toolbar__item"
                    >
                      <MockedDomainExplorerManageColumns
                        columnPickerType="Travels"
                        data={
                          Array [
                            Object {
                              "name": "id",
                              "type": Object {
                                "fields": null,
                                "kind": "SCALAR",
                                "name": "String",
                              },
                            },
                            Object {
                              "name": "flight",
                              "type": Object {
                                "fields": Array [
                                  Object {
                                    "name": "arrival",
                                    "type": Object {
                                      "kind": "SCALAR",
                                      "name": "String",
                                    },
                                  },
                                ],
                                "kind": "OBJECT",
                                "name": "Flight",
                              },
                            },
                          ]
                        }
                        enableRefresh={true}
                        getPicker={
                          Object {
                            "data": Object {
                              "__type": Object {
                                "fields": Array [
                                  Object {
                                    "name": "flight",
                                    "type": Object {
                                      "fields": Array [
                                        Object {
                                          "name": "arrival",
                                          "type": Object {
                                            "kind": "SCALAR",
                                            "name": "String",
                                          },
                                        },
                                      ],
                                      "kind": "OBJECT",
                                      "name": "Flight",
                                    },
                                  },
                                  Object {
                                    "name": "id",
                                    "type": Object {
                                      "fields": null,
                                      "kind": "SCALAR",
                                      "name": "String",
                                    },
                                  },
                                ],
                              },
                            },
                            "loading": false,
                          }
                        }
                        getQueryTypes={
                          Object {
                            "data": Object {
                              "__schema": Object {
                                "queryType": Array [
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "test",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                    ],
                                    "name": "TestArgument",
                                  },
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "city",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                      Object {
                                        "name": "country",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                      Object {
                                        "name": "street",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "TestArgument",
                                        },
                                      },
                                      Object {
                                        "name": "zipCode",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                    ],
                                    "kind": "INPUT_OBJECT",
                                    "name": "AddressArgument",
                                  },
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "id",
                                        "type": Object {
                                          "kind": "LIST",
                                          "name": null,
                                        },
                                      },
                                      Object {
                                        "name": "equal",
                                        "type": Object {
                                          "kind": "SCALAR",
                                          "name": "String",
                                        },
                                      },
                                      Object {
                                        "name": "isNull",
                                        "type": Object {
                                          "kind": "SCALAR",
                                          "name": "Boolean",
                                        },
                                      },
                                    ],
                                    "kind": "INPUT_OBJECT",
                                    "name": "IdArgument",
                                  },
                                ],
                              },
                            },
                            "loading": false,
                          }
                        }
                        isModalOpen={false}
                        metaData={
                          Object {
                            "metadata": Array [
                              Object {
                                "processInstances": Array [
                                  "id",
                                  "processName",
                                  "state",
                                  "start",
                                  "lastUpdate",
                                  "businessKey",
                                  "serviceUrl",
                                ],
                              },
                            ],
                          }
                        }
                        selected={Array []}
                        setEnableRefresh={[Function]}
                        setIsModalOpen={[Function]}
                        setOffsetVal={[Function]}
                        setPageSize={[Function]}
                        setParameters={[Function]}
                        setRunQuery={[Function]}
                        setSelected={[Function]}
                      />
                    </div>
                  </DataToolbarItem>
                </div>
              </DataToolbarGroupWithRef>
            </ForwardRef>
          </div>
          <DataToolbarExpandableContent
            chipContainerRef={
              Object {
                "current": <div
                  class="pf-c-data-toolbar__group"
                />,
              }
            }
            clearAllFilters={[Function]}
            clearFiltersButtonText="Reset to default"
            expandableContentRef={
              Object {
                "current": <div
                  class="pf-c-data-toolbar__expandable-content"
                  id="data-toolbar-with-chip-groups-expandable-content-8"
                >
                  <div
                    class="pf-c-data-toolbar__group"
                  />
                  <div
                    class="pf-c-data-toolbar__group pf-m-chip-container"
                  >
                    <div
                      class="pf-c-data-toolbar__group"
                    />
                    <div
                      class="pf-c-data-toolbar__item"
                    >
                      <button
                        class="pf-c-button pf-m-link pf-m-inline"
                        type="button"
                      >
                        <span
                          class="pf-c-button__text"
                        >
                          Reset to default
                        </span>
                      </button>
                    </div>
                  </div>
                </div>,
              }
            }
            id="data-toolbar-with-chip-groups-expandable-content-5"
            isExpanded={false}
            showClearFiltersButton={true}
          >
            <div
              className="pf-c-data-toolbar__expandable-content"
              id="data-toolbar-with-chip-groups-expandable-content-5"
            >
              <ForwardRef>
                <DataToolbarGroupWithRef
                  breakpointMods={Array []}
                  innerRef={null}
                >
                  <div
                    className="pf-c-data-toolbar__group"
                  />
                </DataToolbarGroupWithRef>
              </ForwardRef>
              <ForwardRef
                className="pf-m-chip-container"
              >
                <DataToolbarGroupWithRef
                  breakpointMods={Array []}
                  className="pf-m-chip-container"
                  innerRef={null}
                >
                  <div
                    className="pf-c-data-toolbar__group pf-m-chip-container"
                  >
                    <ForwardRef>
                      <DataToolbarGroupWithRef
                        breakpointMods={Array []}
                        innerRef={
                          Object {
                            "current": <div
                              class="pf-c-data-toolbar__group"
                            />,
                          }
                        }
                      >
                        <div
                          className="pf-c-data-toolbar__group"
                        />
                      </DataToolbarGroupWithRef>
                    </ForwardRef>
                    <DataToolbarItem
                      className=""
                    >
                      <div
                        className="pf-c-data-toolbar__item"
                      >
                        <Component
                          isInline={true}
                          onClick={[Function]}
                          variant="link"
                        >
                          <ComponentWithOuia
                            component={[Function]}
                            componentProps={
                              Object {
                                "children": "Reset to default",
                                "isInline": true,
                                "onClick": [Function],
                                "variant": "link",
                              }
                            }
                            consumerContext={null}
                          >
                            <Button
                              isInline={true}
                              onClick={[Function]}
                              ouiaContext={
                                Object {
                                  "isOuia": false,
                                  "ouiaId": null,
                                }
                              }
                              variant="link"
                            >
                              <button
                                aria-disabled={null}
                                aria-label={null}
                                className="pf-c-button pf-m-link pf-m-inline"
                                disabled={false}
                                onClick={[Function]}
                                tabIndex={null}
                                type="button"
                              >
                                <span
                                  className="pf-c-button__text"
                                >
                                  Reset to default
                                </span>
                              </button>
                            </Button>
                          </ComponentWithOuia>
                        </Component>
                      </div>
                    </DataToolbarItem>
                  </div>
                </DataToolbarGroupWithRef>
              </ForwardRef>
            </div>
          </DataToolbarExpandableContent>
        </div>
      </DataToolbarContent>
      <DataToolbarChipGroupContent
        chipGroupContentRef={
          Object {
            "current": <div
              class="pf-c-data-toolbar__content"
            >
              <div
                class="pf-c-data-toolbar__group"
              >
                <div
                  class="pf-c-data-toolbar__item pf-m-chip-group"
                >
                  <ul
                    class="pf-c-chip-group pf-m-toolbar"
                  >
                    <li>
                      <h4
                        class="pf-c-chip-group__label"
                        id="pf-random-id-0"
                      >
                        Filters
                      </h4>
                      <ul
                        class="pf-c-chip-group"
                      >
                        <li
                          class="pf-c-chip"
                        >
                          <span
                            class="pf-c-chip__text"
                            id="pf-random-id-1"
                          >
                            metadata / processInstances / state: ACTIVE
                          </span>
                          <button
                            aria-label="close"
                            aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                            class="pf-c-button pf-m-plain"
                            id="remove_pf-random-id-1"
                            type="button"
                          >
                            <svg
                              aria-hidden="true"
                              fill="currentColor"
                              height="1em"
                              role="img"
                              style="vertical-align: -0.125em;"
                              viewBox="0 0 512 512"
                              width="1em"
                            >
                              <path
                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                transform=""
                              />
                            </svg>
                          </button>
                        </li>
                      </ul>
                    </li>
                  </ul>
                </div>
              </div>
              <div
                class="pf-c-data-toolbar__item"
              >
                <button
                  class="pf-c-button pf-m-link pf-m-inline"
                  type="button"
                >
                  <span
                    class="pf-c-button__text"
                  >
                    Reset to default
                  </span>
                </button>
              </div>
            </div>,
          }
        }
        clearAllFilters={[Function]}
        clearFiltersButtonText="Reset to default"
        collapseListedFiltersBreakpoint="md"
        isExpanded={false}
        numberOfFilters={1}
        showClearFiltersButton={true}
      >
        <div
          className="pf-c-data-toolbar__content"
        >
          <ForwardRef
            className=""
          >
            <DataToolbarGroupWithRef
              breakpointMods={Array []}
              className=""
              innerRef={null}
            >
              <div
                className="pf-c-data-toolbar__group"
              />
            </DataToolbarGroupWithRef>
          </ForwardRef>
          <DataToolbarItem
            className=""
          >
            <div
              className="pf-c-data-toolbar__item"
            >
              <Component
                isInline={true}
                onClick={[Function]}
                variant="link"
              >
                <ComponentWithOuia
                  component={[Function]}
                  componentProps={
                    Object {
                      "children": "Reset to default",
                      "isInline": true,
                      "onClick": [Function],
                      "variant": "link",
                    }
                  }
                  consumerContext={null}
                >
                  <Button
                    isInline={true}
                    onClick={[Function]}
                    ouiaContext={
                      Object {
                        "isOuia": false,
                        "ouiaId": null,
                      }
                    }
                    variant="link"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-link pf-m-inline"
                      disabled={false}
                      onClick={[Function]}
                      tabIndex={null}
                      type="button"
                    >
                      <span
                        className="pf-c-button__text"
                      >
                        Reset to default
                      </span>
                    </button>
                  </Button>
                </ComponentWithOuia>
              </Component>
            </div>
          </DataToolbarItem>
        </div>
      </DataToolbarChipGroupContent>
    </div>
  </DataToolbar>
  <div
    className="kogito-common--domain-explorer__table-OverFlow"
  >
    <MockedDomainExplorerTable
      columnFilters={Object {}}
      displayEmptyState={false}
      displayTable={false}
      filterChips={
        Array [
          "metadata / processInstances / state: ACTIVE",
        ]
      }
      filterError={[TypeError: Cannot read property 'data' of undefined]}
      finalFilters={
        Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        }
      }
      handleRetry={[Function]}
      isLoadingMore={false}
      offset={0}
      onDeleteChip={[Function]}
      parameters={
        Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ]
      }
      rows={Array []}
      selected={Array []}
      setRows={[Function]}
      tableLoading={false}
    />
  </div>
</DomainExplorer>
`;

exports[`Domain Explorer component check assertions on rememberedParams 1`] = `
<DomainExplorer
  defaultChip={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  defaultFilter={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "finalFilters": Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        },
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
            "serviceUrl",
          ],
        },
      ],
    }
  }
  rememberedChips={
    Array [
      "metadata / processInstances / state: ACTIVE",
    ]
  }
  rememberedFilters={
    Object {
      "metadata": Object {
        "processInstances": Object {
          "state": Object {
            "equal": "ACTIVE",
          },
        },
      },
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <DataToolbar
    className="pf-m-toggle-group-container"
    clearAllFilters={[Function]}
    clearFiltersButtonText="Reset to default"
    collapseListedFiltersBreakpoint="md"
    id="data-toolbar-with-chip-groups"
  >
    <div
      className="pf-c-data-toolbar pf-m-toggle-group-container"
      id="data-toolbar-with-chip-groups"
    >
      <DataToolbarContent
        breakpointMods={Array []}
        clearAllFilters={[Function]}
        clearFiltersButtonText="Reset to default"
        isExpanded={false}
        key=".0"
        showClearFiltersButton={true}
        toolbarId="data-toolbar-with-chip-groups"
      >
        <div
          className="pf-c-data-toolbar__content"
        >
          <div
            className="pf-c-data-toolbar__content-section"
          >
            <DataToolbarToggleGroup
              breakpoint="xl"
              breakpointMods={Array []}
              toggleIcon={
                <FilterIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                  title={null}
                />
              }
            >
              <div
                className="pf-c-data-toolbar__group pf-m-toggle-group pf-m-show-on-xl"
              >
                <div
                  className="pf-c-data-toolbar__toggle"
                >
                  <Component
                    aria-controls="data-toolbar-with-chip-groups-expandable-content-28"
                    aria-haspopup={false}
                    aria-label="Show Filters"
                    onClick={[Function]}
                    variant="plain"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "aria-controls": "data-toolbar-with-chip-groups-expandable-content-28",
                          "aria-haspopup": false,
                          "aria-label": "Show Filters",
                          "children": <FilterIcon
                            color="currentColor"
                            noVerticalAlign={false}
                            size="sm"
                            title={null}
                          />,
                          "onClick": [Function],
                          "variant": "plain",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        aria-controls="data-toolbar-with-chip-groups-expandable-content-28"
                        aria-haspopup={false}
                        aria-label="Show Filters"
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="plain"
                      >
                        <button
                          aria-controls="data-toolbar-with-chip-groups-expandable-content-28"
                          aria-disabled={null}
                          aria-haspopup={false}
                          aria-label="Show Filters"
                          className="pf-c-button pf-m-plain"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          <FilterIcon
                            color="currentColor"
                            noVerticalAlign={false}
                            size="sm"
                            title={null}
                          >
                            <svg
                              aria-hidden={true}
                              aria-labelledby={null}
                              fill="currentColor"
                              height="1em"
                              role="img"
                              style={
                                Object {
                                  "verticalAlign": "-0.125em",
                                }
                              }
                              viewBox="0 0 512 512"
                              width="1em"
                            >
                              <path
                                d="M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z"
                                transform=""
                              />
                            </svg>
                          </FilterIcon>
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
                <DataToolbarFilter
                  categoryName="Filters"
                  chips={
                    Array [
                      "metadata / processInstances / state: ACTIVE",
                    ]
                  }
                  deleteChip={[Function]}
                  showToolbarItem={true}
                >
                  <DataToolbarItem>
                    <div
                      className="pf-c-data-toolbar__item"
                    >
                      <DataToolbarItem>
                        <div
                          className="pf-c-data-toolbar__item"
                        >
                          <Memo(DomainExplorerFilterOptions)
                            filterChips={
                              Array [
                                "metadata / processInstances / state: ACTIVE",
                              ]
                            }
                            finalFilters={
                              Object {
                                "metadata": Object {
                                  "processInstances": Object {
                                    "state": Object {
                                      "equal": "ACTIVE",
                                    },
                                  },
                                },
                              }
                            }
                            generateFilterQuery={[Function]}
                            getQueryTypes={
                              Object {
                                "data": Object {
                                  "__schema": Object {
                                    "queryType": Array [
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "test",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                        ],
                                        "name": "TestArgument",
                                      },
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "city",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                          Object {
                                            "name": "country",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                          Object {
                                            "name": "street",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "TestArgument",
                                            },
                                          },
                                          Object {
                                            "name": "zipCode",
                                            "type": Object {
                                              "kind": "INPUT_OBJECT",
                                              "name": "StringArgument",
                                            },
                                          },
                                        ],
                                        "kind": "INPUT_OBJECT",
                                        "name": "AddressArgument",
                                      },
                                      Object {
                                        "inputFields": Array [
                                          Object {
                                            "name": "id",
                                            "type": Object {
                                              "kind": "LIST",
                                              "name": null,
                                            },
                                          },
                                          Object {
                                            "name": "equal",
                                            "type": Object {
                                              "kind": "SCALAR",
                                              "name": "String",
                                            },
                                          },
                                          Object {
                                            "name": "isNull",
                                            "type": Object {
                                              "kind": "SCALAR",
                                              "name": "Boolean",
                                            },
                                          },
                                        ],
                                        "kind": "INPUT_OBJECT",
                                        "name": "IdArgument",
                                      },
                                    ],
                                  },
                                },
                                "loading": false,
                              }
                            }
                            getSchema={
                              Object {
                                "data": Object {},
                                "loading": false,
                              }
                            }
                            reset={false}
                            runQuery={false}
                            setFilterChips={[Function]}
                            setFinalFilters={[Function]}
                            setOffset={[Function]}
                            setReset={[Function]}
                            setRunQuery={[Function]}
                          >
                            <Component
                              ariaLabelledBy="Select a field"
                              id="select-field"
                              isExpanded={false}
                              isGrouped={true}
                              maxHeight="60vh"
                              onSelect={[Function]}
                              onToggle={[Function]}
                              placeholderText="Select a field"
                              selections="id"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "ariaLabelledBy": "Select a field",
                                    "children": undefined,
                                    "id": "select-field",
                                    "isExpanded": false,
                                    "isGrouped": true,
                                    "maxHeight": "60vh",
                                    "onSelect": [Function],
                                    "onToggle": [Function],
                                    "placeholderText": "Select a field",
                                    "selections": "id",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Select
                                  aria-label=""
                                  ariaLabelClear="Clear all"
                                  ariaLabelRemove="Remove"
                                  ariaLabelToggle="Options menu"
                                  ariaLabelTypeAhead=""
                                  ariaLabelledBy="Select a field"
                                  className=""
                                  createText="Create"
                                  customContent={null}
                                  direction="down"
                                  hasInlineFilter={false}
                                  id="select-field"
                                  isCreatable={false}
                                  isDisabled={false}
                                  isExpanded={false}
                                  isGrouped={true}
                                  isPlain={false}
                                  maxHeight="60vh"
                                  noResultsFoundText="No results found"
                                  onClear={[Function]}
                                  onCreateOption={[Function]}
                                  onFilter={null}
                                  onSelect={[Function]}
                                  onToggle={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  placeholderText="Select a field"
                                  selections="id"
                                  toggleIcon={null}
                                  toggleId={null}
                                  variant="single"
                                  width=""
                                >
                                  <div
                                    className="pf-c-select"
                                    style={
                                      Object {
                                        "width": "",
                                      }
                                    }
                                  >
                                    <SelectToggle
                                      ariaLabelToggle="Options menu"
                                      ariaLabelledBy="Select a field pf-toggle-id-62"
                                      className=""
                                      handleTypeaheadKeys={[Function]}
                                      hasClearButton={false}
                                      id="pf-toggle-id-62"
                                      isActive={false}
                                      isDisabled={false}
                                      isExpanded={false}
                                      isFocused={false}
                                      isHovered={false}
                                      isPlain={false}
                                      onClose={[Function]}
                                      onEnter={[Function]}
                                      onToggle={[Function]}
                                      parentRef={
                                        Object {
                                          "current": <div
                                            class="pf-c-select"
                                          >
                                            <button
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              aria-labelledby="Select a field pf-toggle-id-62"
                                              class="pf-c-select__toggle"
                                              id="pf-toggle-id-62"
                                              type="button"
                                            >
                                              <div
                                                class="pf-c-select__toggle-wrapper"
                                              >
                                                <span
                                                  class="pf-c-select__toggle-text"
                                                >
                                                  id
                                                </span>
                                              </div>
                                              <svg
                                                aria-hidden="true"
                                                class="pf-c-select__toggle-arrow"
                                                fill="currentColor"
                                                height="1em"
                                                role="img"
                                                style="vertical-align: -0.125em;"
                                                viewBox="0 0 320 512"
                                                width="1em"
                                              >
                                                <path
                                                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                                  transform=""
                                                />
                                              </svg>
                                            </button>
                                          </div>,
                                        }
                                      }
                                      type="button"
                                      variant="single"
                                    >
                                      <button
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-labelledby="Select a field pf-toggle-id-62"
                                        className="pf-c-select__toggle"
                                        disabled={false}
                                        id="pf-toggle-id-62"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        type="button"
                                      >
                                        <div
                                          className="pf-c-select__toggle-wrapper"
                                        >
                                          <span
                                            className="pf-c-select__toggle-text"
                                          >
                                            id
                                          </span>
                                        </div>
                                        <CaretDownIcon
                                          className="pf-c-select__toggle-arrow"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            className="pf-c-select__toggle-arrow"
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 320 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                              transform=""
                                            />
                                          </svg>
                                        </CaretDownIcon>
                                      </button>
                                    </SelectToggle>
                                  </div>
                                </Select>
                              </ComponentWithOuia>
                            </Component>
                            <Component
                              aria-label="Location"
                              id="select-operator"
                              isExpanded={false}
                              onSelect={[Function]}
                              onToggle={[Function]}
                              placeholderText="operator"
                              selections="equal"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "aria-label": "Location",
                                    "children": undefined,
                                    "id": "select-operator",
                                    "isExpanded": false,
                                    "onSelect": [Function],
                                    "onToggle": [Function],
                                    "placeholderText": "operator",
                                    "selections": "equal",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Select
                                  aria-label="Location"
                                  ariaLabelClear="Clear all"
                                  ariaLabelRemove="Remove"
                                  ariaLabelToggle="Options menu"
                                  ariaLabelTypeAhead=""
                                  ariaLabelledBy=""
                                  className=""
                                  createText="Create"
                                  customContent={null}
                                  direction="down"
                                  hasInlineFilter={false}
                                  id="select-operator"
                                  isCreatable={false}
                                  isDisabled={false}
                                  isExpanded={false}
                                  isGrouped={false}
                                  isPlain={false}
                                  noResultsFoundText="No results found"
                                  onClear={[Function]}
                                  onCreateOption={[Function]}
                                  onFilter={null}
                                  onSelect={[Function]}
                                  onToggle={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  placeholderText="operator"
                                  selections="equal"
                                  toggleIcon={null}
                                  toggleId={null}
                                  variant="single"
                                  width=""
                                >
                                  <div
                                    className="pf-c-select"
                                    style={
                                      Object {
                                        "width": "",
                                      }
                                    }
                                  >
                                    <SelectToggle
                                      ariaLabelToggle="Options menu"
                                      ariaLabelledBy=" pf-toggle-id-63"
                                      className=""
                                      handleTypeaheadKeys={[Function]}
                                      hasClearButton={false}
                                      id="pf-toggle-id-63"
                                      isActive={false}
                                      isDisabled={false}
                                      isExpanded={false}
                                      isFocused={false}
                                      isHovered={false}
                                      isPlain={false}
                                      onClose={[Function]}
                                      onEnter={[Function]}
                                      onToggle={[Function]}
                                      parentRef={
                                        Object {
                                          "current": <div
                                            class="pf-c-select"
                                          >
                                            <button
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              aria-labelledby=" pf-toggle-id-63"
                                              class="pf-c-select__toggle"
                                              id="pf-toggle-id-63"
                                              type="button"
                                            >
                                              <div
                                                class="pf-c-select__toggle-wrapper"
                                              >
                                                <span
                                                  class="pf-c-select__toggle-text"
                                                >
                                                  equal
                                                </span>
                                              </div>
                                              <svg
                                                aria-hidden="true"
                                                class="pf-c-select__toggle-arrow"
                                                fill="currentColor"
                                                height="1em"
                                                role="img"
                                                style="vertical-align: -0.125em;"
                                                viewBox="0 0 320 512"
                                                width="1em"
                                              >
                                                <path
                                                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                                  transform=""
                                                />
                                              </svg>
                                            </button>
                                          </div>,
                                        }
                                      }
                                      type="button"
                                      variant="single"
                                    >
                                      <button
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-labelledby=" pf-toggle-id-63"
                                        className="pf-c-select__toggle"
                                        disabled={false}
                                        id="pf-toggle-id-63"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        type="button"
                                      >
                                        <div
                                          className="pf-c-select__toggle-wrapper"
                                        >
                                          <span
                                            className="pf-c-select__toggle-text"
                                          >
                                            equal
                                          </span>
                                        </div>
                                        <CaretDownIcon
                                          className="pf-c-select__toggle-arrow"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            className="pf-c-select__toggle-arrow"
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 320 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                                              transform=""
                                            />
                                          </svg>
                                        </CaretDownIcon>
                                      </button>
                                    </SelectToggle>
                                  </div>
                                </Select>
                              </ComponentWithOuia>
                            </Component>
                            <ForwardRef
                              aria-label="filter text for id"
                              className="kogito-common--filter-options__inputs"
                              id="textBox-input"
                              name="filterText"
                              onChange={[Function]}
                              placeholder="value"
                              type="search"
                              value=""
                            >
                              <TextInputBase
                                aria-label="filter text for id"
                                className="kogito-common--filter-options__inputs"
                                id="textBox-input"
                                innerRef={null}
                                isDisabled={false}
                                isReadOnly={false}
                                isRequired={false}
                                isValid={true}
                                name="filterText"
                                onChange={[Function]}
                                placeholder="value"
                                type="search"
                                validated="default"
                                value=""
                              >
                                <input
                                  aria-invalid={false}
                                  aria-label="filter text for id"
                                  className="pf-c-form-control kogito-common--filter-options__inputs"
                                  disabled={false}
                                  id="textBox-input"
                                  name="filterText"
                                  onChange={[Function]}
                                  placeholder="value"
                                  readOnly={false}
                                  required={false}
                                  type="search"
                                  value=""
                                />
                              </TextInputBase>
                            </ForwardRef>
                            <Component
                              id="button-with-string"
                              isDisabled={true}
                              onClick={[Function]}
                              variant="primary"
                            >
                              <ComponentWithOuia
                                component={[Function]}
                                componentProps={
                                  Object {
                                    "children": "Apply Filter",
                                    "id": "button-with-string",
                                    "isDisabled": true,
                                    "onClick": [Function],
                                    "variant": "primary",
                                  }
                                }
                                consumerContext={null}
                              >
                                <Button
                                  id="button-with-string"
                                  isDisabled={true}
                                  onClick={[Function]}
                                  ouiaContext={
                                    Object {
                                      "isOuia": false,
                                      "ouiaId": null,
                                    }
                                  }
                                  variant="primary"
                                >
                                  <button
                                    aria-disabled={null}
                                    aria-label={null}
                                    className="pf-c-button pf-m-primary"
                                    disabled={true}
                                    id="button-with-string"
                                    onClick={[Function]}
                                    tabIndex={null}
                                    type="button"
                                  >
                                    Apply Filter
                                  </button>
                                </Button>
                              </ComponentWithOuia>
                            </Component>
                          </Memo(DomainExplorerFilterOptions)>
                        </div>
                      </DataToolbarItem>
                    </div>
                  </DataToolbarItem>
                  <Portal
                    containerInfo={
                      <div
                        class="pf-c-data-toolbar__group"
                      >
                        <div
                          class="pf-c-data-toolbar__item pf-m-chip-group"
                        >
                          <ul
                            class="pf-c-chip-group pf-m-toolbar"
                          >
                            <li>
                              <h4
                                class="pf-c-chip-group__label"
                                id="pf-random-id-4"
                              >
                                Filters
                              </h4>
                              <ul
                                class="pf-c-chip-group"
                              >
                                <li
                                  class="pf-c-chip"
                                >
                                  <span
                                    class="pf-c-chip__text"
                                    id="pf-random-id-5"
                                  >
                                    metadata / processInstances / state: ACTIVE
                                  </span>
                                  <button
                                    aria-label="close"
                                    aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
                                    class="pf-c-button pf-m-plain"
                                    id="remove_pf-random-id-5"
                                    type="button"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      fill="currentColor"
                                      height="1em"
                                      role="img"
                                      style="vertical-align: -0.125em;"
                                      viewBox="0 0 512 512"
                                      width="1em"
                                    >
                                      <path
                                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                        transform=""
                                      />
                                    </svg>
                                  </button>
                                </li>
                              </ul>
                            </li>
                          </ul>
                        </div>
                      </div>
                    }
                  >
                    <DataToolbarItem
                      variant="chip-group"
                    >
                      <div
                        className="pf-c-data-toolbar__item pf-m-chip-group"
                      >
                        <ChipGroup
                          className=""
                          collapsedText="\${remaining} more"
                          defaultIsOpen={false}
                          expandedText="Show Less"
                          numChips={3}
                          withToolbar={true}
                        >
                          <InnerChipGroup
                            className=""
                            collapsedText="\${remaining} more"
                            defaultIsOpen={false}
                            expandedText="Show Less"
                            isOpen={false}
                            numChips={3}
                            onToggleCollapse={[Function]}
                            withToolbar={true}
                          >
                            <ChipGroupToolbarItem
                              categoryName="Filters"
                              className=""
                              closeBtnAriaLabel="Close chip group"
                              isClosable={false}
                              key=".$Filters"
                              onClick={[Function]}
                              tooltipPosition="top"
                            >
                              <GenerateId
                                prefix="pf-random-id-"
                              >
                                <ul
                                  className="pf-c-chip-group pf-m-toolbar"
                                >
                                  <li>
                                    <h4
                                      className="pf-c-chip-group__label"
                                      id="pf-random-id-4"
                                    >
                                      Filters
                                    </h4>
                                    <ul
                                      className="pf-c-chip-group"
                                    >
                                      <Component
                                        component="li"
                                        key=".$metadata / processInstances / state=2 ACTIVE"
                                        onClick={[Function]}
                                      >
                                        <ComponentWithOuia
                                          component={[Function]}
                                          componentProps={
                                            Object {
                                              "children": "metadata / processInstances / state: ACTIVE",
                                              "component": "li",
                                              "onClick": [Function],
                                            }
                                          }
                                          consumerContext={null}
                                        >
                                          <Chip
                                            className=""
                                            closeBtnAriaLabel="close"
                                            component="li"
                                            isOverflowChip={false}
                                            isReadOnly={false}
                                            onClick={[Function]}
                                            ouiaContext={
                                              Object {
                                                "isOuia": false,
                                                "ouiaId": null,
                                              }
                                            }
                                            tooltipPosition="top"
                                          >
                                            <GenerateId
                                              prefix="pf-random-id-"
                                            >
                                              <li
                                                className="pf-c-chip"
                                              >
                                                <span
                                                  className="pf-c-chip__text"
                                                  id="pf-random-id-5"
                                                >
                                                  metadata / processInstances / state: ACTIVE
                                                </span>
                                                <ChipButton
                                                  aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
                                                  ariaLabel="close"
                                                  id="remove_pf-random-id-5"
                                                  onClick={[Function]}
                                                >
                                                  <Component
                                                    aria-label="close"
                                                    aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
                                                    className=""
                                                    id="remove_pf-random-id-5"
                                                    onClick={[Function]}
                                                    variant="plain"
                                                  >
                                                    <ComponentWithOuia
                                                      component={[Function]}
                                                      componentProps={
                                                        Object {
                                                          "aria-label": "close",
                                                          "aria-labelledby": "remove_pf-random-id-5 pf-random-id-5",
                                                          "children": <TimesCircleIcon
                                                            aria-hidden="true"
                                                            color="currentColor"
                                                            noVerticalAlign={false}
                                                            size="sm"
                                                            title={null}
                                                          />,
                                                          "className": "",
                                                          "id": "remove_pf-random-id-5",
                                                          "onClick": [Function],
                                                          "variant": "plain",
                                                        }
                                                      }
                                                      consumerContext={
                                                        Object {
                                                          "isOuia": false,
                                                          "ouiaId": null,
                                                        }
                                                      }
                                                    >
                                                      <Button
                                                        aria-label="close"
                                                        aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
                                                        className=""
                                                        id="remove_pf-random-id-5"
                                                        onClick={[Function]}
                                                        ouiaContext={
                                                          Object {
                                                            "isOuia": false,
                                                            "ouiaId": null,
                                                          }
                                                        }
                                                        variant="plain"
                                                      >
                                                        <button
                                                          aria-disabled={null}
                                                          aria-label="close"
                                                          aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
                                                          className="pf-c-button pf-m-plain"
                                                          disabled={false}
                                                          id="remove_pf-random-id-5"
                                                          onClick={[Function]}
                                                          tabIndex={null}
                                                          type="button"
                                                        >
                                                          <TimesCircleIcon
                                                            aria-hidden="true"
                                                            color="currentColor"
                                                            noVerticalAlign={false}
                                                            size="sm"
                                                            title={null}
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              aria-labelledby={null}
                                                              fill="currentColor"
                                                              height="1em"
                                                              role="img"
                                                              style={
                                                                Object {
                                                                  "verticalAlign": "-0.125em",
                                                                }
                                                              }
                                                              viewBox="0 0 512 512"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                                                transform=""
                                                              />
                                                            </svg>
                                                          </TimesCircleIcon>
                                                        </button>
                                                      </Button>
                                                    </ComponentWithOuia>
                                                  </Component>
                                                </ChipButton>
                                              </li>
                                            </GenerateId>
                                          </Chip>
                                        </ComponentWithOuia>
                                      </Component>
                                    </ul>
                                  </li>
                                </ul>
                              </GenerateId>
                            </ChipGroupToolbarItem>
                          </InnerChipGroup>
                        </ChipGroup>
                      </div>
                    </DataToolbarItem>
                  </Portal>
                </DataToolbarFilter>
              </div>
            </DataToolbarToggleGroup>
            <ForwardRef>
              <DataToolbarGroupWithRef
                breakpointMods={Array []}
                innerRef={null}
              >
                <div
                  className="pf-c-data-toolbar__group"
                >
                  <DataToolbarItem>
                    <div
                      className="pf-c-data-toolbar__item"
                    >
                      <MockedDomainExplorerManageColumns
                        columnPickerType="Travels"
                        data={
                          Array [
                            Object {
                              "name": "id",
                              "type": Object {
                                "fields": null,
                                "kind": "SCALAR",
                                "name": "String",
                              },
                            },
                            Object {
                              "name": "flight",
                              "type": Object {
                                "fields": Array [
                                  Object {
                                    "name": "arrival",
                                    "type": Object {
                                      "kind": "SCALAR",
                                      "name": "String",
                                    },
                                  },
                                ],
                                "kind": "OBJECT",
                                "name": "Flight",
                              },
                            },
                          ]
                        }
                        enableRefresh={true}
                        getPicker={
                          Object {
                            "data": Object {
                              "__type": Object {
                                "fields": Array [
                                  Object {
                                    "name": "flight",
                                    "type": Object {
                                      "fields": Array [
                                        Object {
                                          "name": "arrival",
                                          "type": Object {
                                            "kind": "SCALAR",
                                            "name": "String",
                                          },
                                        },
                                      ],
                                      "kind": "OBJECT",
                                      "name": "Flight",
                                    },
                                  },
                                  Object {
                                    "name": "id",
                                    "type": Object {
                                      "fields": null,
                                      "kind": "SCALAR",
                                      "name": "String",
                                    },
                                  },
                                ],
                              },
                            },
                            "loading": false,
                          }
                        }
                        getQueryTypes={
                          Object {
                            "data": Object {
                              "__schema": Object {
                                "queryType": Array [
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "test",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                    ],
                                    "name": "TestArgument",
                                  },
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "city",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                      Object {
                                        "name": "country",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                      Object {
                                        "name": "street",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "TestArgument",
                                        },
                                      },
                                      Object {
                                        "name": "zipCode",
                                        "type": Object {
                                          "kind": "INPUT_OBJECT",
                                          "name": "StringArgument",
                                        },
                                      },
                                    ],
                                    "kind": "INPUT_OBJECT",
                                    "name": "AddressArgument",
                                  },
                                  Object {
                                    "inputFields": Array [
                                      Object {
                                        "name": "id",
                                        "type": Object {
                                          "kind": "LIST",
                                          "name": null,
                                        },
                                      },
                                      Object {
                                        "name": "equal",
                                        "type": Object {
                                          "kind": "SCALAR",
                                          "name": "String",
                                        },
                                      },
                                      Object {
                                        "name": "isNull",
                                        "type": Object {
                                          "kind": "SCALAR",
                                          "name": "Boolean",
                                        },
                                      },
                                    ],
                                    "kind": "INPUT_OBJECT",
                                    "name": "IdArgument",
                                  },
                                ],
                              },
                            },
                            "loading": false,
                          }
                        }
                        isModalOpen={false}
                        metaData={
                          Object {
                            "metadata": Array [
                              Object {
                                "processInstances": Array [
                                  "id",
                                  "processName",
                                  "state",
                                  "start",
                                  "lastUpdate",
                                  "businessKey",
                                  "serviceUrl",
                                ],
                              },
                            ],
                          }
                        }
                        selected={Array []}
                        setEnableRefresh={[Function]}
                        setIsModalOpen={[Function]}
                        setOffsetVal={[Function]}
                        setPageSize={[Function]}
                        setParameters={[Function]}
                        setRunQuery={[Function]}
                        setSelected={[Function]}
                      />
                    </div>
                  </DataToolbarItem>
                </div>
              </DataToolbarGroupWithRef>
            </ForwardRef>
          </div>
          <DataToolbarExpandableContent
            chipContainerRef={
              Object {
                "current": <div
                  class="pf-c-data-toolbar__group"
                />,
              }
            }
            clearAllFilters={[Function]}
            clearFiltersButtonText="Reset to default"
            expandableContentRef={
              Object {
                "current": <div
                  class="pf-c-data-toolbar__expandable-content"
                  id="data-toolbar-with-chip-groups-expandable-content-28"
                >
                  <div
                    class="pf-c-data-toolbar__group"
                  />
                  <div
                    class="pf-c-data-toolbar__group pf-m-chip-container"
                  >
                    <div
                      class="pf-c-data-toolbar__group"
                    />
                    <div
                      class="pf-c-data-toolbar__item"
                    >
                      <button
                        class="pf-c-button pf-m-link pf-m-inline"
                        type="button"
                      >
                        <span
                          class="pf-c-button__text"
                        >
                          Reset to default
                        </span>
                      </button>
                    </div>
                  </div>
                </div>,
              }
            }
            id="data-toolbar-with-chip-groups-expandable-content-28"
            isExpanded={false}
            showClearFiltersButton={true}
          >
            <div
              className="pf-c-data-toolbar__expandable-content"
              id="data-toolbar-with-chip-groups-expandable-content-28"
            >
              <ForwardRef>
                <DataToolbarGroupWithRef
                  breakpointMods={Array []}
                  innerRef={null}
                >
                  <div
                    className="pf-c-data-toolbar__group"
                  />
                </DataToolbarGroupWithRef>
              </ForwardRef>
              <ForwardRef
                className="pf-m-chip-container"
              >
                <DataToolbarGroupWithRef
                  breakpointMods={Array []}
                  className="pf-m-chip-container"
                  innerRef={null}
                >
                  <div
                    className="pf-c-data-toolbar__group pf-m-chip-container"
                  >
                    <ForwardRef>
                      <DataToolbarGroupWithRef
                        breakpointMods={Array []}
                        innerRef={
                          Object {
                            "current": <div
                              class="pf-c-data-toolbar__group"
                            />,
                          }
                        }
                      >
                        <div
                          className="pf-c-data-toolbar__group"
                        />
                      </DataToolbarGroupWithRef>
                    </ForwardRef>
                    <DataToolbarItem
                      className=""
                    >
                      <div
                        className="pf-c-data-toolbar__item"
                      >
                        <Component
                          isInline={true}
                          onClick={[Function]}
                          variant="link"
                        >
                          <ComponentWithOuia
                            component={[Function]}
                            componentProps={
                              Object {
                                "children": "Reset to default",
                                "isInline": true,
                                "onClick": [Function],
                                "variant": "link",
                              }
                            }
                            consumerContext={null}
                          >
                            <Button
                              isInline={true}
                              onClick={[Function]}
                              ouiaContext={
                                Object {
                                  "isOuia": false,
                                  "ouiaId": null,
                                }
                              }
                              variant="link"
                            >
                              <button
                                aria-disabled={null}
                                aria-label={null}
                                className="pf-c-button pf-m-link pf-m-inline"
                                disabled={false}
                                onClick={[Function]}
                                tabIndex={null}
                                type="button"
                              >
                                <span
                                  className="pf-c-button__text"
                                >
                                  Reset to default
                                </span>
                              </button>
                            </Button>
                          </ComponentWithOuia>
                        </Component>
                      </div>
                    </DataToolbarItem>
                  </div>
                </DataToolbarGroupWithRef>
              </ForwardRef>
            </div>
          </DataToolbarExpandableContent>
        </div>
      </DataToolbarContent>
      <DataToolbarChipGroupContent
        chipGroupContentRef={
          Object {
            "current": <div
              class="pf-c-data-toolbar__content"
            >
              <div
                class="pf-c-data-toolbar__group"
              >
                <div
                  class="pf-c-data-toolbar__item pf-m-chip-group"
                >
                  <ul
                    class="pf-c-chip-group pf-m-toolbar"
                  >
                    <li>
                      <h4
                        class="pf-c-chip-group__label"
                        id="pf-random-id-4"
                      >
                        Filters
                      </h4>
                      <ul
                        class="pf-c-chip-group"
                      >
                        <li
                          class="pf-c-chip"
                        >
                          <span
                            class="pf-c-chip__text"
                            id="pf-random-id-5"
                          >
                            metadata / processInstances / state: ACTIVE
                          </span>
                          <button
                            aria-label="close"
                            aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
                            class="pf-c-button pf-m-plain"
                            id="remove_pf-random-id-5"
                            type="button"
                          >
                            <svg
                              aria-hidden="true"
                              fill="currentColor"
                              height="1em"
                              role="img"
                              style="vertical-align: -0.125em;"
                              viewBox="0 0 512 512"
                              width="1em"
                            >
                              <path
                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                transform=""
                              />
                            </svg>
                          </button>
                        </li>
                      </ul>
                    </li>
                  </ul>
                </div>
              </div>
              <div
                class="pf-c-data-toolbar__item"
              >
                <button
                  class="pf-c-button pf-m-link pf-m-inline"
                  type="button"
                >
                  <span
                    class="pf-c-button__text"
                  >
                    Reset to default
                  </span>
                </button>
              </div>
            </div>,
          }
        }
        clearAllFilters={[Function]}
        clearFiltersButtonText="Reset to default"
        collapseListedFiltersBreakpoint="md"
        isExpanded={false}
        numberOfFilters={1}
        showClearFiltersButton={true}
      >
        <div
          className="pf-c-data-toolbar__content"
        >
          <ForwardRef
            className=""
          >
            <DataToolbarGroupWithRef
              breakpointMods={Array []}
              className=""
              innerRef={null}
            >
              <div
                className="pf-c-data-toolbar__group"
              />
            </DataToolbarGroupWithRef>
          </ForwardRef>
          <DataToolbarItem
            className=""
          >
            <div
              className="pf-c-data-toolbar__item"
            >
              <Component
                isInline={true}
                onClick={[Function]}
                variant="link"
              >
                <ComponentWithOuia
                  component={[Function]}
                  componentProps={
                    Object {
                      "children": "Reset to default",
                      "isInline": true,
                      "onClick": [Function],
                      "variant": "link",
                    }
                  }
                  consumerContext={null}
                >
                  <Button
                    isInline={true}
                    onClick={[Function]}
                    ouiaContext={
                      Object {
                        "isOuia": false,
                        "ouiaId": null,
                      }
                    }
                    variant="link"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-link pf-m-inline"
                      disabled={false}
                      onClick={[Function]}
                      tabIndex={null}
                      type="button"
                    >
                      <span
                        className="pf-c-button__text"
                      >
                        Reset to default
                      </span>
                    </button>
                  </Button>
                </ComponentWithOuia>
              </Component>
            </div>
          </DataToolbarItem>
        </div>
      </DataToolbarChipGroupContent>
    </div>
  </DataToolbar>
  <div
    className="kogito-common--domain-explorer__table-OverFlow"
  >
    <MockedDomainExplorerTable
      columnFilters={Object {}}
      displayEmptyState={false}
      displayTable={false}
      filterChips={
        Array [
          "metadata / processInstances / state: ACTIVE",
        ]
      }
      filterError={[TypeError: Cannot read property 'data' of undefined]}
      finalFilters={
        Object {
          "metadata": Object {
            "processInstances": Object {
              "state": Object {
                "equal": "ACTIVE",
              },
            },
          },
        }
      }
      handleRetry={[Function]}
      isLoadingMore={false}
      offset={0}
      onDeleteChip={[Function]}
      parameters={
        Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ]
      }
      rows={Array []}
      selected={Array []}
      setRows={[Function]}
      tableLoading={false}
    />
  </div>
</DomainExplorer>
`;
